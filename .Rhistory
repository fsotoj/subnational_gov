}
pal
# Guardar en la estructura anidada
dict_palette[[as.character(year_sel)]][[country]][[variable_sel]] <- pal
dict_palette
variable_sel
dict_palette[[as.character(year_sel)]][[country]][[variable_sel]]
variable_sel <- dict$variable[27]
year_sel <- 1983
values <- data %>%
filter(country_name == country,
year == year_sel) %>%
pull(all_of(variable_sel))
values
year_sel <- 2014
values <- data %>%
filter(country_name == country,
year == year_sel) %>%
pull(all_of(variable_sel))
values
if (length(values) != 0){
var_info <- filter(dict,variable == variable_sel)
palette_vector <- unlist(strsplit(var_info$palette, ","))
pal <- get_leaflet_palette(var_info$type, palette_vector, values)
} else {
pal <- NULL
}
pal
get_leaflet_palette <- function(type, palette_vector, values) {
values <- values[!is.na(values)]
if (type == "binary") {
pal <- colorFactor(palette = palette_vector, domain = c(0,1))
} else if (type == "categorical" || type == "ordinal") {
pal <- colorFactor(palette = palette_vector, domain = unique(values))
} else if (type == "numerical" || type == "ratio") {
breaks <- classInt::classIntervals(values, n = length(palette_vector), style = "quantile")$brks
pal <- colorBin(palette = palette_vector, domain = values, bins = breaks, pretty = FALSE)
} else {
pal <- NULL
}
return(pal)
}
library(purrr)
countries <- unique(data$country_name)
countries
variables <- unique(dict$variable)
variables
years <- unique(data$year)
years
create_pal <- function(country, variable_sel, year_sel) {
values <- data %>%
filter(country_name == country, year == year_sel) %>%
pull(all_of(variable_sel))
if (length(values) == 0) return(NULL)
var_info <- filter(dict, variable == variable_sel)
if (nrow(var_info) == 0) return(NULL)
palette_vector <- unlist(strsplit(var_info$palette, ","))
get_leaflet_palette(var_info$type, palette_vector, values)
}
create_pal <- function(country, variable_sel, year_sel) {
values <- data %>%
filter(country_name == country,
year == year_sel) %>%
pull(all_of(variable_sel))
if (length(values) != 0){
var_info <- filter(dict,variable == variable_sel)
palette_vector <- unlist(strsplit(var_info$palette, ","))
pal <- get_leaflet_palette(var_info$type, palette_vector, values)
} else {
pal <- NULL
}
return(pal)
}
# Recorrer todas las combinaciones
walk(countries, function(country) {
walk(variables, function(variable_sel) {
walk(years, function(year_sel) {
pal <- agregar_paleta(country, variable_sel, year_sel)
# Guardar aunque sea NULL
dict_palette[[as.character(year_sel)]][[country]][[variable_sel]] <<- pal
})
})
})
# Recorrer todas las combinaciones
walk(countries, function(country) {
walk(variables, function(variable_sel) {
walk(years, function(year_sel) {
pal <- create_pal(country, variable_sel, year_sel)
# Guardar aunque sea NULL
dict_palette[[as.character(year_sel)]][[country]][[variable_sel]] <<- pal
})
})
})
country
variable_sel
year_sel
countries
variables
years
country <- "ARGENTINA"
variable_sel <- dict$variable[1]
year_sel <- 1983
values <- data %>%
filter(country_name == country,
year == year_sel) %>%
pull(all_of(variable_sel))
values
if (length(values) != 0){
var_info <- filter(dict,variable == variable_sel)
palette_vector <- unlist(strsplit(var_info$palette, ","))
pal <- get_leaflet_palette(var_info$type, palette_vector, values)
} else {
pal <- NULL
}
pal
message(paste(country,variable_sel,year_sel))
create_pal <- function(country, variable_sel, year_sel) {
values <- data %>%
filter(country_name == country,
year == year_sel) %>%
pull(all_of(variable_sel))
if (length(values) != 0){
var_info <- filter(dict,variable == variable_sel)
palette_vector <- unlist(strsplit(var_info$palette, ","))
message(paste(country,variable_sel,year_sel))
pal <- get_leaflet_palette(var_info$type, palette_vector, values)
} else {
pal <- NULL
}
return(pal)
}
# Recorrer todas las combinaciones
walk(countries, function(country) {
walk(variables, function(variable_sel) {
walk(years, function(year_sel) {
pal <- create_pal(country, variable_sel, year_sel)
# Guardar aunque sea NULL
dict_palette[[as.character(year_sel)]][[country]][[variable_sel]] <<- pal
})
})
})
dict$variable
country <- "ARGENTINA"
variable_sel <- dict$variable[4]
year_sel <- 2007
values <- data %>%
filter(country_name == country,
year == year_sel) %>%
pull(all_of(variable_sel))
values
var_info <- filter(dict,variable == variable_sel)
palette_vector <- unlist(strsplit(var_info$palette, ","))
var_info
palette_vector <- unlist(strsplit(var_info$palette, ","))
if (length(values) != 0){
pal <- get_leaflet_palette(var_info$type, palette_vector, values)
} else {
pal <- NULL
}
if (length(values) != 0){
if (length(values) != 0){
if (type == "binary") {
pal <- colorFactor(palette = palette_vector, domain = c(0, 1))
} else if (type %in% c("categorical", "ordinal")) {
pal <- colorFactor(palette = palette_vector, domain = unique(values))
} else if (type %in% c("numerical", "ratio")) {
pal <- tryCatch({
breaks <- classInt::classIntervals(values, n = length(palette_vector), style = "quantile")$brks
colorBin(palette = palette_vector, domain = values, bins = breaks, pretty = FALSE)
}, error = function(e) {
if (grepl("single unique value", e$message)) {
val <- unique(values)[1]
breaks <- c(val, val + 1e-6)  # crea un rango mínimo artificial
colorBin(palette = tail(palette_vector, 1), domain = values, bins = breaks, pretty = FALSE)
} else {
NULL
}
})
} else {
pal <- NULL
}
}
if (length(values) != 0){
if (type == "binary") {
pal <- colorFactor(palette = palette_vector, domain = c(0,1))
} else if (type == "categorical" || type == "ordinal") {
pal <- colorFactor(palette = palette_vector, domain = unique(values))
} else if (type == "numerical" || type == "ratio") {
breaks <- classInt::classIntervals(values, n = length(palette_vector), style = "quantile")$brks
pal <- colorBin(palette = palette_vector, domain = values, bins = breaks, pretty = FALSE)
}
} else {
pal <- NULL
}
values <- data %>%
filter(country_name == country,
year == year_sel) %>%
pull(all_of(variable_sel))
values
var_info <- filter(dict,variable == variable_sel)
type <- var_info$type
type
values <- data %>%
filter(country_name == country,
year == year_sel) %>%
pull(all_of(variable_sel))
if (length(values) != 0){
if (type == "binary") {
pal <- colorFactor(palette = palette_vector, domain = c(0,1))
} else if (type == "categorical" || type == "ordinal") {
pal <- colorFactor(palette = palette_vector, domain = unique(values))
} else if (type == "numerical" || type == "ratio") {
breaks <- classInt::classIntervals(values, n = length(palette_vector), style = "quantile")$brks
pal <- colorBin(palette = palette_vector, domain = values, bins = breaks, pretty = FALSE)
}
} else {
pal <- NULL
}
if (length(values) != 0){
if (type == "binary") {
pal <- colorFactor(palette = palette_vector, domain = c(0,1))
} else if (type == "categorical" || type == "ordinal") {
pal <- colorFactor(palette = palette_vector, domain = unique(values))
} else if (type == "numerical" || type == "ratio") {
breaks <- classInt::classIntervals(values, n = length(palette_vector), style = "quantile")$brks
pal <- colorBin(palette = palette_vector, domain = values, bins = breaks, pretty = FALSE)
}
} else {
pal <- NULL
}
if (length(values) != 0){
if (type == "binary") {
pal <- colorFactor(palette = palette_vector, domain = c(0,1))
} else if (type == "categorical" || type == "ordinal") {
pal <- colorFactor(palette = palette_vector, domain = unique(values))
} else if (type == "numerical" || type == "ratio") {
pal <- tryCatch({
breaks <- classInt::classIntervals(values, n = length(palette_vector), style = "quantile")$brks
colorBin(palette = palette_vector, domain = values, bins = breaks, pretty = FALSE)
}, error = function(e) {
if (grepl("single unique value", e$message)) {
val <- unique(values)[1]
breaks <- c(val, val + 1e-6)  # crea un rango mínimo artificial
colorBin(palette = tail(palette_vector, 1), domain = values, bins = breaks, pretty = FALSE)
} else {
NULL
}
})
} else {
pal <- NULL
}
}
pal
create_pal <- function(country, variable_sel, year_sel) {
var_info <- filter(dict,variable == variable_sel)
palette_vector <- unlist(strsplit(var_info$palette, ","))
type <- var_info$type
values <- data %>%
filter(country_name == country,
year == year_sel) %>%
pull(all_of(variable_sel))
if (length(values) != 0){
if (type == "binary") {
pal <- colorFactor(palette = palette_vector, domain = c(0,1))
} else if (type == "categorical" || type == "ordinal") {
pal <- colorFactor(palette = palette_vector, domain = unique(values))
} else if (type == "numerical" || type == "ratio") {
pal <- tryCatch({
breaks <- classInt::classIntervals(values, n = length(palette_vector), style = "quantile")$brks
colorBin(palette = palette_vector, domain = values, bins = breaks, pretty = FALSE)
}, error = function(e) {
if (grepl("single unique value", e$message)) {
val <- unique(values)[1]
breaks <- c(val, val + 1e-6)  # crea un rango mínimo artificial
colorBin(palette = tail(palette_vector, 1), domain = values, bins = breaks, pretty = FALSE)
} else {
NULL
}
})
} else {
pal <- NULL
}
}
}
# Recorrer todas las combinaciones
walk(countries, function(country) {
walk(variables, function(variable_sel) {
walk(years, function(year_sel) {
pal <- create_pal(country, variable_sel, year_sel)
# Guardar aunque sea NULL
dict_palette[[as.character(year_sel)]][[country]][[variable_sel]] <<- pal
})
})
})
dict_palette
country <- "ARGENTINA"
variable_sel <- dict$variable[4]
year_sel <- 2007
dict_palette[[as.character(year_sel)]][[country]][[variable_sel]]
create_pal <- function(country, variable_sel, year_sel) {
var_info <- filter(dict,variable == variable_sel)
palette_vector <- unlist(strsplit(var_info$palette, ","))
type <- var_info$type
values <- data %>%
filter(country_name == country,
year == year_sel) %>%
pull(all_of(variable_sel))
if (length(values) != 0){
if (type == "binary") {
pal <- colorFactor(palette = palette_vector, domain = c(0,1))
legend_labels <- c("0", "1")
return(list(pal = pal, legend = legend_labels))
} else if (type == "categorical" || type == "ordinal") {
pal <- colorFactor(palette = palette_vector, domain = unique(values))
legend_labels <- as.character(unique(values))
return(list(pal = pal, legend = legend_labels))
} else if (type == "numerical" || type == "ratio") {
pal <- tryCatch({
ci <- classInt::classIntervals(values, n = length(palette_vector), style = "quantile")
breaks <- ci$brks
pal <- colorBin(palette = palette_vector, domain = values, bins = breaks, pretty = FALSE)
legend_labels <- paste0(
format(round(breaks[-length(breaks)], 2), nsmall = 2),
" – ",
format(round(breaks[-1], 2), nsmall = 2)
)
list(pal = pal, legend = legend_labels)
}, error = function(e) {
if (grepl("single unique value", e$message)) {
val <- unique(values)[1]
breaks <- c(val, val + 1e-6)  # crea un rango mínimo artificial
pal <- colorBin(palette = tail(palette_vector, 1), domain = values, bins = breaks, pretty = FALSE)
list(pal = pal, legend = paste0(val, " (único valor)"))
} else {
list(pal = NULL, legend = NULL)
}
})
} else {
pal <- NULL
legend_labels <- NULL
}
}
}
# Recorrer todas las combinaciones
walk(countries, function(country) {
walk(variables, function(variable_sel) {
walk(years, function(year_sel) {
pal <- create_pal(country, variable_sel, year_sel)
# Guardar aunque sea NULL
dict_palette[[as.character(year_sel)]][[country]][[variable_sel]] <<- pal
})
})
})
warnings()
dict_palette[[as.character(year_sel)]][[country]][[variable_sel]]
geom <- st_read("data/geom_paises_simplified.gpkg")
geom_filtered <- geom %>%
filter(country_name == country_sel)
country_sel <- "ARGENTINA"
variable_sel <- dict$variable[4]
year_sel <- 2007
geom_filtered <- geom %>%
filter(country_name == country_sel)
data_filtered <- data %>%
filter(country_name == country_sel, year == year_sel)
left_join(geom_filtered, data_filtered, by = "country_state_code")
data_map <- left_join(geom_filtered, data_filtered, by = "country_state_code")
dict_palette[[as.character(year_sel)]][[country]][[variable_sel]]
palette_filtered <- dict_palette[[as.character(year_sel)]][[country]][[variable_sel]]$pal
palette_filtered
data_map[[variable_sel]]
vales <- data_map[[variable_sel]]
values <- data_map[[variable_sel]]
leaflet(data_map) %>%
addTiles() %>%
addPolygons(
fillColor = ~palette_filtered(values),
color = "black",
weight = 1,
fillOpacity = 0.7
) %>%
addLegend(
pal = pal,
values = values,
title = variable_sel,
position = "bottomright"
)
country_sel <- "ARGENTINA"
variable_sel <- dict$variable[7]
year_sel <- 2007
geom_filtered <- geom %>%
filter(country_name == country_sel)
data_filtered <- data %>%
filter(country_name == country_sel, year == year_sel)
data_map <- left_join(geom_filtered, data_filtered, by = "country_state_code")
palette_filtered <- dict_palette[[as.character(year_sel)]][[country]][[variable_sel]]$pal
values <- data_map[[variable_sel]]
leaflet(data_map) %>%
addTiles() %>%
addPolygons(
fillColor = ~palette_filtered(values),
color = "black",
weight = 1,
fillOpacity = 0.7
) %>%
addLegend(
pal = pal,
values = values,
title = variable_sel,
position = "bottomright"
)
palette_filtered
values <- data_map[[variable_sel]]
leaflet(data_map) %>%
addTiles() %>%
addPolygons(
fillColor = ~palette_filtered(values),
color = "black",
weight = 1,
fillOpacity = 0.7
) %>%
addLegend(
pal = pal,
values = values,
title = variable_sel,
position = "bottomright"
)
values
leaflet(data_map) %>%
addTiles() %>%
addPolygons(
fillColor = ~palette_filtered(values),
color = "black",
weight = 1,
fillOpacity = 0.7
) %>%
addLegend(
pal = palette_filtered,
values = values,
title = variable_sel,
position = "bottomright"
)
palette_filtered
palette_filtered <- dict_palette[[as.character(year_sel)]][[country]][[variable_sel]]$legend
palette_filtered
palette_filtered <- dict_palette[[as.character(year_sel)]][[country]][[variable_sel]]$pal
legend <- dict_palette[[as.character(year_sel)]][[country]][[variable_sel]]$legend
values <- data_map[[variable_sel]]
palette_filtered
leaflet(data_map) %>%
addTiles() %>%
addPolygons(
fillColor = ~palette_filtered(values),
color = "black",
weight = 1,
fillOpacity = 0.7
) %>%
addLegend(
pal = palette_filtered,
values = values,
title = variable_sel,
labFormat = function(type, cuts, p) { info$legend },
position = "bottomright"
)
leaflet(data_map) %>%
addTiles() %>%
addPolygons(
fillColor = ~palette_filtered(values),
color = "black",
weight = 1,
fillOpacity = 0.7,
label = ~paste0(NAME, ": ", nc$mi_variable)
) %>%
addLegend(
pal = palette_filtered,
values = values,
title = variable_sel,
labFormat = function(type, cuts, p) { info$legend },
position = "bottomright"
)
palette_filtered <- dict_palette[[as.character(year_sel)]][[country]][[variable_sel]]$pal
legend <- dict_palette[[as.character(year_sel)]][[country]][[variable_sel]]$legend
values <- data_map[[variable_sel]]
legend
palette_filtered
library(dplyr)
library(sf)
geom <- st_read("data/geom_paises_simplified2.gpkg")
st_write(geom_simp3 %>% select(!fid), "data/geom_paises_simplified3.gpkg")
geom_simp3 <- geom %>% st_simplify(dTolerance = 30)
st_write(geom_simp3 %>% select(!fid), "data/geom_paises_simplified3.gpkg")
st_write(geom_simp3 %>% select(!fid), "data/geom_paises_simplified3.gpkg", append = F)
geom_simp4 <- geom %>% st_simplify(dTolerance = 1000)
st_write(geom_simp4 %>% select(!fid) , "data/geom_paises_simplified4.gpkg", append = F)
geom_simp5 <- geom %>% st_simplify(dTolerance = 10000)
mapview::mapview(geom_simp5)
st_write(geom_simp5 %>% select(!fid), "data/geom_paises_simplified5.gpkg")
shiny::runApp()
runApp()
geom <- st_read("data/geom_paises_simplified2.gpkg")
geom_simp4 <- geom %>% st_simplify(dTolerance = 1000)
unioned <- st_union(geom_simp4)
mapview::mapview(unioned)
# Cortar de nuevo por unidad administrativa original (ej. provincias)
arg_clean <- st_intersection(geom, unioned)
mapview::mapview(arg_clean)
arg_clean <- st_make_valid(arg_clean)
mapview::mapview(arg_clean)
runApp()
geom <- st_read("data/geom_paises_simplified2.gpkg")
mapview::mapview(geom)
runApp()
