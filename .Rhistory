# Apply back with layout (important: don't overwrite anything else)
plot <- plotly::layout(plot, shapes = all_shapes)
# View plot
plot
# Apply back with layout (important: don't overwrite anything else)
plot <- plotly::layout(plot, shapes = all_shapes)
# View plot
plot
library(htmlwidgets)
# Create the vistime plot
plot <- vistime(
df,
col.event = "popup_content",
col.group = "group",
col.start = "start",
col.end   = "end",
title = "Governor Terms",
optimize_y = TRUE,
show_labels = FALSE
)
# Add vertical line after rendering
plot <- htmlwidgets::onRender(
plot,
'
function(el, x) {
var vline = {
type: "line",
x0: "2011-12-10",
x1: "2011-12-10",
y0: 0,
y1: 1,
xref: "x",
yref: "paper",
line: {
color: "red",
width: 2,
dash: "dot"
}
};
if (!x.layout.shapes) {
x.layout.shapes = [];
}
x.layout.shapes.push(vline);
}
'
)
plot
# Create the vistime plot
plot <- vistime(
df,
col.event = "popup_content",
col.group = "group",
col.start = "start",
col.end   = "end",
title = "Governor Terms",
optimize_y = TRUE,
show_labels = FALSE
)
# Add vertical line after rendering
plot <- htmlwidgets::onRender(
plot,
'
function(el, x) {
var vline = {
type: "line",
x0: "2011-12-10",
x1: "2011-12-10",
y0: 0,
y1: 1,
xref: "x",
yref: "paper",
line: {
color: "red",
width: 2,
dash: "dot"
}
};
if (!x.layout.shapes) {
x.layout.shapes = [];
}
x.layout.shapes.push(vline);
}
'
)
plot
plot$x$layout
plot$x$layout$shapes <- list(vline)
plot
plot$x$layout
# Build the vistime plot
plot <- vistime(
df,
col.event = "popup_content",
col.group = "group",
col.start = "start",
col.end   = "end",
title = "Governor Terms",
optimize_y = TRUE,
show_labels = FALSE
)
# Prepare your vertical line
vline <- list(
type = "line",
x0 = "2011-12-10",
x1 = "2011-12-10",
y0 = 0,
y1 = 1,
xref = "x",
yref = "paper",
line = list(color = "red", width = 2, dash = "dot")
)
# If shapes slot is NULL, create it
if (is.null(plot$x$layout$shapes)) {
plot$x$layout$shapes <- list()
}
# Append your vertical line
plot$x$layout$shapes <- c(plot$x$layout$shapes, list(vline))
# Done!
plot
# Done!
plot
plot$sizingPolicy
# Build the vistime plot
plot <- vistime(
df,
col.event = "popup_content",
col.group = "group",
col.start = "start",
col.end   = "end",
title = "Governor Terms",
optimize_y = TRUE,
show_labels = FALSE
)
# Prepare your vertical line
vline <- list(
type = "line",
x0 = "2011-12-10",
x1 = "2011-12-10",
y0 = 0,
y1 = 1,
xref = "x",
yref = "paper",
line = list(color = "red", width = 2, dash = "dot")
)
plot
plot$x$layout <- c(plot$x$layout, list(vline))
plot
plot$x$layout
# Append your vertical line
shapes <- c(plot$x$layout, list(vline))
# Append your vertical line
shapes <- c(plot$x$layout, list(vline))
shapes
plotly::layout(plot, shapes = all_shapes)
plotly::layout(plot, shapes = vline)
# Build the vistime plot
plot <- vistime(
df,
col.event = "popup_content",
col.group = "group",
col.start = "start",
col.end   = "end",
title = "Governor Terms",
optimize_y = TRUE,
show_labels = FALSE
)
# Extract existing shapes (horizontal bars)
existing_shapes <- plot$x$layout$shapes
# Define vertical line
vline <- list(
type = "line",
x0 = "2011-12-10",
x1 = "2011-12-10",
y0 = 0,
y1 = 1,
xref = "x",
yref = "paper",
line = list(color = "red", width = 2, dash = "dot")
)
# Combine existing shapes with new one
all_shapes <- c(existing_shapes, list(vline))
# Apply back with layout (important: don't overwrite anything else)
plot <- plotly::layout(plot, shapes = all_shapes)
# View plot
plot
plot
# Build the vistime plot
# Get the underlying plotly object from vistime
plot <- vistime(
df,
col.event = "popup_content",
col.group = "group",
col.start = "start",
col.end   = "end",
title = "Governor Terms",
optimize_y = TRUE,
show_labels = FALSE
)
plot$x$layout
# Manually add the shape to the layout slot
plot$x$layout$shapes <- list(
list(
type = "line",
x0 = "2011-12-10",
x1 = "2011-12-10",
y0 = 0,
y1 = 1,
xref = "x",
yref = "paper",
line = list(color = "red", width = 2, dash = "dot")
)
)
plot$x$layout
# Re-check layout to verify itâ€™s there
str(plot$x$layout$shapes, max.level = 2)
# Display plot
plot
plot$preRenderHook()
plot$jsHooks
plot$dependencies
plot$height
plot$x
plot$x$layoutAttrs
plot$x$layoutAttrs$ee984a7a1e0b$shapes
# Build the vistime plot
# Get the underlying plotly object from vistime
plot <- vistime(
df,
col.event = "popup_content",
col.group = "group",
col.start = "start",
col.end   = "end",
title = "Governor Terms",
optimize_y = TRUE,
show_labels = FALSE
)
plot$x$layoutAttrs$ee984a7a1e0b$shapes
plot$x$layoutAttrs$ee986d3343a$shapes
plot$x$cur_data
plot$x$config
plot$x$source
plot +
geom_vline(xintercept = as.numeric(as.POSIXct("2021-01-01")), color = "red", size = .5)
plot
plot +
geom_vline(xintercept = as.numeric(as.POSIXct("2021-01-01")), color = "red", width = .5)
plot +
geom_vline(xintercept = as.numeric(as.POSIXct("2021-01-01")), color = "red", linewidth = .5)
# Get the name of the layoutAttrs slot (should be just one)
layout_id <- names(plot$x$layoutAttrs)[1]
# Build the vistime plot
# Get the underlying plotly object from vistime
plot <- vistime(
df,
col.event = "popup_content",
col.group = "group",
col.start = "start",
col.end   = "end",
title = "Governor Terms",
optimize_y = TRUE,
show_labels = FALSE
)
layout_id
# Manually add the shape to the layout slot
# Your vertical line
vline <- list(
type = "line",
x0 = "2011-12-10",
x1 = "2011-12-10",
y0 = 0,
y1 = 1,
xref = "x",
yref = "paper",
line = list(color = "red", width = 2, dash = "dot")
)
# Append to the correct layoutAttr slot
plot$x$layoutAttrs[[layout_id]]$shapes <- c(
plot$x$layoutAttrs[[layout_id]]$shapes,
list(vline)
)
# Done!
plot
plot$x$layoutAttrs[[layout_id]]$shapes
# Append to the correct layoutAttr slot
plot$x$layoutAttrs[[layout_id]]$shapes <- c(
plot$x$layoutAttrs[[layout_id]]$shapes,
list(vline)
)
# Done!
plot
# Also, explicitly update layout's shapes (to force re-render)
plot <- plotly::layout(
plot,
shapes = plot$x$layoutAttrs[[layout_id]]$shapes
)
plot
# Your existing vistime plot
plot <- vistime(
df,
col.event = "popup_content",
col.group = "group",
col.start = "start",
col.end   = "end",
title = "Governor Terms",
optimize_y = TRUE,
show_labels = FALSE
)
max_y <- length(unique(df$group)) + 0.5
vline_x <- as.POSIXct("2011-12-10", format = "%Y-%m-%d")
# Add vertical line as a scatter trace
plot <- plot %>%
add_trace(
x = c(vline_x, vline_x),
y = c(0.5, max_y),
type = "scatter",
mode = "lines",
line = list(color = "red", width = 2, dash = "dash"),
inherit = FALSE, # Important: prevent inheriting vistime styling
showlegend = FALSE
)
plot
# Add vertical line as a scatter trace
plot <- plot %>%
add_trace(
x = c(vline_x, vline_x),
y = c(0, max_y),
type = "scatter",
mode = "lines",
line = list(color = "red", width = 2, dash = "dash"),
inherit = FALSE, # Important: prevent inheriting vistime styling
showlegend = FALSE
)
plot
max_y
# Add vertical line as a scatter trace
plot <- plot %>%
add_trace(
x = c(vline_x, vline_x),
y = c(0, 4),
type = "scatter",
mode = "lines",
line = list(color = "red", width = 2, dash = "dash"),
inherit = FALSE, # Important: prevent inheriting vistime styling
showlegend = FALSE
)
plot
# Add vertical line as a scatter trace
plot <- plot %>%
add_trace(
x = c(vline_x, vline_x),
y = c(0, 6),
type = "scatter",
mode = "lines",
line = list(color = "red", width = 2, dash = "dash"),
inherit = FALSE, # Important: prevent inheriting vistime styling
showlegend = FALSE
)
plot
max_y
length(unique(df$group))
df$group
max_y <- length(unique(df$group)) * 2
max_y
vline_x <- as.POSIXct("2011-12-10", format = "%Y-%m-%d")
# Add vertical line as a scatter trace
plot <- plot %>%
add_trace(
x = c(vline_x, vline_x),
y = c(0, 6),
type = "scatter",
mode = "lines",
line = list(color = "red", width = 2, dash = "dash"),
inherit = FALSE, # Important: prevent inheriting vistime styling
showlegend = FALSE
)
plot
# Copy the reactive data to avoid mutating data()
df <- read.xlsx("data/complete_database_edit2.xlsx") %>%
filter(country_name == "ARGENTINA", state_name == "BUENOS AIRES") %>%
select(year, head_name_sub, ideo_party_sub, term_head_sub,party = head_party_sub) %>%
tidyr::separate(term_head_sub, into = c("start", "end"), sep = "-") %>%
rename(content = head_name_sub, group = ideo_party_sub) %>%
select(content, group, start, end,party) %>%
distinct() %>%
mutate(start = as.POSIXct(start, format = "%d/%m/%Y"),
end = as.POSIXct(end, format = "%d/%m/%Y")
)
# Replace NA end dates with today's date
df$end[is.na(df$end)] <- Sys.Date()
# Define group labels
group_labels <- c("Left", "Center Left", "Center Right", "Right")
names(group_labels) <- c(1, 2, 3, 4)
# Create popup content
df$popup_content <- paste0(
df$content,
"<br>Party: ", df$party
)
gov_type <- "governor"
# Map group numbers to labels
df$group <- factor(df$group, levels = 1:4, labels = group_labels)
# Your existing vistime plot
plot <- vistime(
df,
col.event = "popup_content",
col.group = "group",
col.start = "start",
col.end   = "end",
title = "Governor Terms",
optimize_y = TRUE,
show_labels = FALSE
)
max_y <- length(unique(df$group)) * 2
vline_x <- as.POSIXct("2011-12-10", format = "%Y-%m-%d")
# Add vertical line as a scatter trace
plot <- plot %>%
add_trace(
x = c(vline_x, vline_x),
y = c(0, 6),
type = "scatter",
mode = "lines",
line = list(color = "red", width = 2, dash = "dash"),
inherit = FALSE, # Important: prevent inheriting vistime styling
showlegend = FALSE
)
plot
df <- read.xlsx("data/complete_database_edit2.xlsx")
df$la_state_name %>% unique()
# Copy the reactive data to avoid mutating data()
df <- read.xlsx("data/complete_database_edit2.xlsx") %>%
filter(country_name == "ARGENTINA", state_name == "MENDOZA") %>%
select(year, head_name_sub, ideo_party_sub, term_head_sub,party = head_party_sub) %>%
tidyr::separate(term_head_sub, into = c("start", "end"), sep = "-") %>%
rename(content = head_name_sub, group = ideo_party_sub) %>%
select(content, group, start, end,party) %>%
distinct() %>%
mutate(start = as.POSIXct(start, format = "%d/%m/%Y"),
end = as.POSIXct(end, format = "%d/%m/%Y")
)
# Replace NA end dates with today's date
df$end[is.na(df$end)] <- Sys.Date()
# Define group labels
group_labels <- c("Left", "Center Left", "Center Right", "Right")
names(group_labels) <- c(1, 2, 3, 4)
# Create popup content
df$popup_content <- paste0(
df$content,
"<br>Party: ", df$party
)
gov_type <- "governor"
# Map group numbers to labels
df$group <- factor(df$group, levels = 1:4, labels = group_labels)
# Your existing vistime plot
plot <- vistime(
df,
col.event = "popup_content",
col.group = "group",
col.start = "start",
col.end   = "end",
title = "Governor Terms",
optimize_y = TRUE,
show_labels = FALSE
)
max_y <- length(unique(df$group)) * 2
vline_x <- as.POSIXct("2011-12-10", format = "%Y-%m-%d")
# Add vertical line as a scatter trace
plot <- plot %>%
add_trace(
x = c(vline_x, vline_x),
y = c(0, 6),
type = "scatter",
mode = "lines",
line = list(color = "red", width = 2, dash = "dash"),
inherit = FALSE, # Important: prevent inheriting vistime styling
showlegend = FALSE
)
plot
df <- read.xlsx("data/complete_database_edit2.xlsx")
df %>% filter(early_exit_sub == 1)
# Copy the reactive data to avoid mutating data()
df <- read.xlsx("data/complete_database_edit2.xlsx") %>%
filter(country_name == "ARGENTINA", state_name == "CAPITAL FEDERAL") %>%
select(year, head_name_sub, ideo_party_sub, term_head_sub,party = head_party_sub) %>%
tidyr::separate(term_head_sub, into = c("start", "end"), sep = "-") %>%
rename(content = head_name_sub, group = ideo_party_sub) %>%
select(content, group, start, end,party) %>%
distinct() %>%
mutate(start = as.POSIXct(start, format = "%d/%m/%Y"),
end = as.POSIXct(end, format = "%d/%m/%Y")
)
df
# Copy the reactive data to avoid mutating data()
df <- read.xlsx("data/complete_database_edit2.xlsx") %>%
filter(country_name == "ARGENTINA", state_name == "CAPITAL FEDERAL") %>%
tidyr::separate(term_head_sub, into = c("start", "end"), sep = "-") %>%
select(year, head_name_sub, ideo_party_sub, term_head_sub,party = head_party_sub, early_exit_sub) %>%
rename(content = head_name_sub, group = ideo_party_sub) %>%
distinct() %>%
mutate(start = as.POSIXct(start, format = "%d/%m/%Y"),
end = as.POSIXct(end, format = "%d/%m/%Y")
)
# Copy the reactive data to avoid mutating data()
df <- read.xlsx("data/complete_database_edit2.xlsx") %>%
filter(country_name == "ARGENTINA", state_name == "CAPITAL FEDERAL") %>%
tidyr::separate(term_head_sub, into = c("start", "end"), sep = "-") %>%
select(year, head_name_sub, ideo_party_sub, party = head_party_sub, early_exit_sub, start, end) %>%
rename(content = head_name_sub, group = ideo_party_sub) %>%
distinct() %>%
mutate(start = as.POSIXct(start, format = "%d/%m/%Y"),
end = as.POSIXct(end, format = "%d/%m/%Y")
)
df
shiny::runApp()
