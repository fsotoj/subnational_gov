shiny::runApp()
library(leaflet.extras)
runApp()
shiny::runApp()
install.packages("timevis")
library(timevis)
data <- data.frame(
id      = 1:4,
content = c("Item one"  , "Item two"  ,"Ranged item", "Item four"),
start   = c("2016-01-10", "2016-01-11", "2016-01-20", "2016-02-14 15:00:00"),
end     = c(NA          ,           NA, "2016-02-04", NA)
)
timevis(data)
library(openxlsx)
data <-read.xlsx("data/complete_database_edit.xlsx")
data
prueba <- data %>%
filter(country_name == "ARGENTINA", state_name == "BUENOS AIRES")
prueba
prueba %>%
select(head_name_sub, ideo_party_sub, term_head_sub)
prueba %>%
select(year,head_name_sub, ideo_party_sub, term_head_sub)
prueba %>%
select(year,head_name_sub, ideo_party_sub, term_head_sub) %>%
tidyr:: separate(fecha, into = c("start", "end"), sep = "-")
prueba %>%
select(year,head_name_sub, ideo_party_sub, term_head_sub) %>%
tidyr:: separate(term_head_sub, into = c("start", "end"), sep = "-")
prueba %>%
select(year,head_name_sub, ideo_party_sub, term_head_sub) %>%
tidyr:: separate(term_head_sub, into = c("start", "end"), sep = "-") %>%
rename(content = head_name_sub, group = ideo_party_sub)
data_prueba <- prueba %>%
select(year,head_name_sub, ideo_party_sub, term_head_sub) %>%
tidyr:: separate(term_head_sub, into = c("start", "end"), sep = "-") %>%
rename(content = head_name_sub, group = ideo_party_sub)
timevis(data_prueba)
timevis(data_prueba,groups = group)
timevis(data_prueba,groups = "group")
data_prueba <- prueba %>%
select(year,head_name_sub, ideo_party_sub, term_head_sub) %>%
tidyr:: separate(term_head_sub, into = c("start", "end"), sep = "-") %>%
rename(content = head_name_sub, group = ideo_party_sub) %>%
select(content,group,start, end)
timevis(data_prueba)
data_prueba <- prueba %>%
select(year,head_name_sub, ideo_party_sub, term_head_sub) %>%
tidyr:: separate(term_head_sub, into = c("start", "end"), sep = "-") %>%
rename(content = head_name_sub, group = ideo_party_sub) %>%
select(content,group,start, end) %>% unique()
timevis(data_prueba)
?timevis
timevis(data_prueba,data_prueba$group)
timevis(data_prueba,data_prueba %>% select(group))
timevis(data_prueba,data.frame(id = 1:4, content = c("Left", "Center Left", "Center Right","Right")))
data_prueba
timevis(data_prueba,data.frame(id = 1:4, content = c("Left", "Center Left", "Center Right","Right")), fit = TRUE)
data %>%
filter(country_name == "ARGENTINA")
data %>%
filter(country_name == "ARGENTINA") %>% pull(state_name) %>% unique()
prueba <- data %>%
filter(country_name == "ARGENTINA", state_name == "MENDOZA")
data_prueba <- prueba %>%
select(year,head_name_sub, ideo_party_sub, term_head_sub) %>%
tidyr:: separate(term_head_sub, into = c("start", "end"), sep = "-") %>%
rename(content = head_name_sub, group = ideo_party_sub) %>%
select(content,group,start, end) %>% unique()
timevis(data_prueba,data.frame(id = 1:4, content = c("Left", "Center Left", "Center Right","Right")), fit = TRUE)
data_prueba
runApp()
runApp()
library(timevis)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(plotly)
library(dplyr)
# Sample data
df <- data.frame(
task = c("Design", "Development", "Testing", "Launch"),
start = as.Date(c("2025-05-01", "2025-05-10", "2025-06-01", "2025-06-15")),
end = as.Date(c("2025-05-09", "2025-05-31", "2025-06-14", "2025-06-30")),
color = c("blue", "green", "orange", "red")
)
# Calculate duration
df <- df %>% mutate(duration = end - start)
# Plot
plot_ly() %>%
add_trace(
type = 'bar',
x = df$duration,
y = df$task,
base = df$start,
orientation = 'h',
marker = list(color = df$color),
hoverinfo = 'text',
text = ~paste("Start:", df$start, "<br>End:", df$end)
) %>%
layout(
title = "Project Timeline",
xaxis = list(title = "Date", type = "date"),
yaxis = list(title = "Task"),
barmode = 'stack'
)
runApp()
library(vistime)
# Create a simple dataset
timeline_data <- data.frame(
content = c("President A", "President B", "President C", "President D"),
start   = c("2010-01-01", "2012-06-01", "2015-01-01", "2018-03-01"),
end     = c("2012-05-31", "2014-12-31", "2018-02-28", "2022-12-31"),
group   = c("Left", "Right", "Center", "Right")
)
# Render the timeline
vistime(
timeline_data,
col.event = "content",
col.group = "group",
col.start = "start",
col.end   = "end",
title     = "Presidential Terms",
optimize_y = TRUE
)
data <- read.xlsx("data/complete_database_edit.xlsx")
# Create a simple dataset
timeline_data <- data %>%
filter(country_name == input$country_sel, state_name == input$state) %>%
select(year, head_name_sub, ideo_party_sub, term_head_sub) %>%
tidyr::separate(term_head_sub, into = c("start", "end"), sep = "-") %>%
rename(content = head_name_sub, group = ideo_party_sub) %>%
select(content, group, start, end) %>%
distinct()
# Create a simple dataset
timeline_data <- data %>%
filter(country_name == "ARGENTINA", state_name == "BUENOS AIRES") %>%
select(year, head_name_sub, ideo_party_sub, term_head_sub) %>%
tidyr::separate(term_head_sub, into = c("start", "end"), sep = "-") %>%
rename(content = head_name_sub, group = ideo_party_sub) %>%
select(content, group, start, end) %>%
distinct()
# Render the timeline
vistime(
timeline_data,
col.event = "content",
col.group = "group",
col.start = "start",
col.end   = "end",
title     = "Presidential Terms",
optimize_y = TRUE
)
timeline_data
# Create a simple dataset
timeline_data <- data %>%
filter(country_name == "ARGENTINA", state_name == "BUENOS AIRES") %>%
select(year, head_name_sub, ideo_party_sub, term_head_sub) %>%
tidyr::separate(term_head_sub, into = c("start", "end"), sep = "-") %>%
rename(content = head_name_sub, group = ideo_party_sub) %>%
select(content, group, start, end) %>%
distinct() %>%
mutate(start = as.POSIXct(start, format = "%d/%m/%Y"),
end = as.POSIXct(end, format = "%d/%m/%Y")
)
# Render the timeline
vistime(
timeline_data,
col.event = "content",
col.group = "group",
col.start = "start",
col.end   = "end",
title     = "Presidential Terms",
optimize_y = TRUE
)
# Render the timeline
timeline_plot  <- vistime(
timeline_data,
col.event = "content",
col.group = "group",
col.start = "start",
col.end   = "end",
title     = "Presidential Terms",
optimize_y = TRUE
)
timeline_plot <- timeline_plot %>%
layout(
annotations = lapply(1:nrow(timeline_data), function(i) {
list(
x = as.numeric(timeline_data$start[i]),       # Position along x-axis (start date)
y = i,                                       # Position along y-axis (event index)
text = timeline_data$content[i],              # Label text
showarrow = FALSE,                            # No arrow
font = list(size = 10, color = "black"),      # Label font size and color
textangle = 0,                                # Text angle (rotate if necessary)
xanchor = "center",                           # Align text horizontally
yanchor = "center",                           # Align text vertically
align = "center"
)
})
)
timeline_plot
timeline_plot <- timeline_plot %>%
layout(
annotations = lapply(1:nrow(timeline_data), function(i) {
list(
x = as.numeric(timeline_data$start[i]),       # Position along x-axis (start date)
y = i,                                       # Position along y-axis (event index)
text = timeline_data$content[i],              # Label text
showarrow = TRUE,                            # No arrow
font = list(size = 10, color = "black"),      # Label font size and color
textangle = 0,                                # Text angle (rotate if necessary)
xanchor = "center",                           # Align text horizontally
yanchor = "center",                           # Align text vertically
align = "center"
)
})
)
timeline_plot
# Render the timeline
timeline_plot  <- vistime(
timeline_data,
col.event = "content",
col.group = "group",
col.start = "start",
col.end   = "end",
title     = "Presidential Terms",
optimize_y = TRUE
)
timeline_plot
?vistime
# Render the timeline
timeline_plot  <- vistime(
timeline_data,
col.event = "content",
col.group = "group",
col.start = "start",
col.end   = "end",
title     = "Presidential Terms",
optimize_y = TRUE,
show_labels = FALSE
)
timeline_plot
timeline_plot
# Render the timeline
timeline_plot  <- vistime(
timeline_data,
col.event = "content",
col.group = "group",
col.start = "start",
col.end   = "end",
title     = "Presidential Terms",
optimize_y = TRUE,
show_labels = T
)
timeline_plot
# Render the timeline
timeline_plot  <- vistime(
timeline_data,
col.event = "content",
col.group = "group",
col.start = "start",
col.end   = "end",
title     = "Presidential Terms",
optimize_y = TRUE,
show_labels = F
)
# Render the timeline
vistime(
timeline_data,
col.event = "content",
col.group = "group",
col.start = "start",
col.end   = "end",
title     = "Presidential Terms",
optimize_y = TRUE,
show_labels = F
)
# Render the timeline
vistime(
timeline_data,
col.event = "content",
col.group = "group",
col.start = "start",
col.end   = "end",
title     = "Presidential Terms",
optimize_y = TRUE,
show_labels = F
)
data
# Create a simple dataset
timeline_data <- data %>%
filter(country_name == "ARGENTINA", state_name == "BUENOS AIRES") %>%
select(year, head_name_sub, ideo_party_sub, term_head_sub,head_party_sub) %>%
tidyr::separate(term_head_sub, into = c("start", "end"), sep = "-") %>%
rename(content = head_name_sub, group = ideo_party_sub) %>%
select(content, group, start, end) %>%
distinct() %>%
mutate(start = as.POSIXct(start, format = "%d/%m/%Y"),
end = as.POSIXct(end, format = "%d/%m/%Y")
)
timeline_data$popup_content <- paste(
timeline_data$content,
"<br>Party: ", timeline_data$party,
"<br>Term Length: ", timeline_data$term_length
)
timeline_data$popup_content <- paste(
timeline_data$content,
"<br>Party: ", timeline_data$head_party_sub,
)
timeline_data$popup_content <- paste(
timeline_data$content,
"<br>Party: ", timeline_data$head_party_sub
)
# Render the timeline
vistime(
timeline_data,
col.event = "content",
col.group = "group",
col.start = "start",
col.end   = "end",
title     = "Presidential Terms",
optimize_y = TRUE,
show_labels = F
)
# Render the timeline
vistime(
timeline_data,
col.event = "popup_content",
col.group = "group",
col.start = "start",
col.end   = "end",
title     = "Presidential Terms",
optimize_y = TRUE,
show_labels = F
)
timeline_data
# Create a simple dataset
timeline_data <- data %>%
filter(country_name == "ARGENTINA", state_name == "BUENOS AIRES") %>%
select(year, head_name_sub, ideo_party_sub, term_head_sub,head_party_sub) %>%
tidyr::separate(term_head_sub, into = c("start", "end"), sep = "-") %>%
rename(content = head_name_sub, group = ideo_party_sub) %>%
select(content, group, start, end) %>%
distinct() %>%
mutate(start = as.POSIXct(start, format = "%d/%m/%Y"),
end = as.POSIXct(end, format = "%d/%m/%Y")
)
timeline_data$popup_content <- paste(
timeline_data$content,
"<br>Party: ", timeline_data$head_party_sub
)
# Render the timeline
vistime(
timeline_data,
col.event = "popup_content",
col.group = "group",
col.start = "start",
col.end   = "end",
title     = "Presidential Terms",
optimize_y = TRUE,
show_labels = F
)
# Create a simple dataset
timeline_data <- data %>%
filter(country_name == "ARGENTINA", state_name == "BUENOS AIRES") %>%
select(year, head_name_sub, ideo_party_sub, term_head_sub,head_party_sub) %>%
tidyr::separate(term_head_sub, into = c("start", "end"), sep = "-") %>%
rename(content = head_name_sub, group = ideo_party_sub) %>%
select(content, group, start, end,head_party_sub) %>%
distinct() %>%
mutate(start = as.POSIXct(start, format = "%d/%m/%Y"),
end = as.POSIXct(end, format = "%d/%m/%Y")
)
timeline_data$popup_content <- paste(
timeline_data$content,
"<br>Party: ", timeline_data$head_party_sub
)
# Render the timeline
vistime(
timeline_data,
col.event = "popup_content",
col.group = "group",
col.start = "start",
col.end   = "end",
title     = "Presidential Terms",
optimize_y = TRUE,
show_labels = F
)
timeline_data$end[is.na(timeline_data$end)] <- Sys.Date()
timeline_data
timeline_data$popup_content <- paste(
timeline_data$content,
"<br>Party: ", timeline_data$head_party_sub
)
# Render the timeline
vistime(
timeline_data,
col.event = "popup_content",
col.group = "group",
col.start = "start",
col.end   = "end",
title     = "Presidential Terms",
optimize_y = TRUE,
show_labels = F
)
group_labels <- c("Left", "Center Left", "Center Right", "Right")
names(group_labels) <- c(1, 2, 3, 4)  # Mapping group numbers to their labels
timeline_data$group <- factor(timeline_data$group, levels = 1:4, labels = group_labels)
# Render the timeline
vistime(
timeline_data,
col.event = "popup_content",
col.group = "group",
col.start = "start",
col.end   = "end",
title     = "Presidential Terms",
optimize_y = TRUE,
show_labels = F
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data <- read.xlsx("data/complete_database_edit.xlsx")
data %>% head()
data %>% names()
runApp()
runApp()
data <- read.xlsx("data/complete_database_edit.xlsx")
data %>%
filter(year =< 2023)
data %>%
filter(year <= 2023)
data %>%
filter(year <= 2023, country_name == "ARGENTINA")
data$electoral_national_year
data %>%
filter(year <= 2023, country_name == "ARGENTINA",electoral_national_year)
data %>%
filter(year <= 2023, country_name == "ARGENTINA",electoral_national_year==1)
data %>%
filter(year <= 2023, country_name == "ARGENTINA",electoral_national_year==1) %>%
pull(year) %>% max()
data %>%
filter(year <= 2022, country_name == "ARGENTINA",electoral_national_year==1) %>%
pull(year) %>% max()
?box
runApp()
runApp()
runApp()
runApp()
?valueBox
runApp()
runApp()
runApp()
